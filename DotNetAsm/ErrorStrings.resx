<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddressingModeNotSupported" xml:space="preserve">
    <value>Addressing mode not supported for instruction '{0}'</value>
  </data>
  <data name="AssertionFailure" xml:space="preserve">
    <value>Assertion failed: '{0}'</value>
  </data>
  <data name="BadExpression" xml:space="preserve">
    <value>Unknown or invalid expression: '{0}'</value>
  </data>
  <data name="CannotResolveAnonymousLabel" xml:space="preserve">
    <value>Cannot resolve anonymous label</value>
  </data>
  <data name="ClosureDoesNotCloseBlock" xml:space="preserve">
    <value>Closure '{0}' does not close a block</value>
  </data>
  <data name="ClosureDoesNotCloseMacro" xml:space="preserve">
    <value>Closure {0} does not close a {1}</value>
  </data>
  <data name="CouldNotProcessBinary" xml:space="preserve">
    <value>Could not process binary file '{0}'</value>
  </data>
  <data name="DefininingUnknownType" xml:space="preserve">
    <value>Type '{0}' is unknown or not redefinable</value>
  </data>
  <data name="Depricated" xml:space="preserve">
    <value>{0} is depricated</value>
  </data>
  <data name="DirectiveTakesNoArguments" xml:space="preserve">
    <value>Directive '{0}' takes no arguments</value>
  </data>
  <data name="EncodingNameNotValid" xml:space="preserve">
    <value>Encoding '{0}' is not a name or option</value>
  </data>
  <data name="FilenameNotSpecified" xml:space="preserve">
    <value>Filename not specified</value>
  </data>
  <data name="IllegalQuantity" xml:space="preserve">
    <value>Illegal quantity '{0}'</value>
  </data>
  <data name="InstructionNotSupported" xml:space="preserve">
    <value>The instruction '{0}' is not supported for the selected CPU</value>
  </data>
  <data name="InvalidParameters" xml:space="preserve">
    <value>Invalid parameter(s) ({0})</value>
  </data>
  <data name="InvalidParamRef" xml:space="preserve">
    <value>Invalid parameter reference '{0}'</value>
  </data>
  <data name="InvalidPCAssignment" xml:space="preserve">
    <value>Invalid Program Counter assignment '{0}'</value>
  </data>
  <data name="LabelNotDefined" xml:space="preserve">
    <value>Symbol '{0}' not found</value>
  </data>
  <data name="LabelNotLeft" xml:space="preserve">
    <value>Label is not the leftmost character</value>
  </data>
  <data name="LabelNotValid" xml:space="preserve">
    <value>'{0}' is not a valid symbol name</value>
  </data>
  <data name="LabelRedefinition" xml:space="preserve">
    <value>Redefinition of label '{0}'</value>
  </data>
  <data name="MacroParamIncorrect" xml:space="preserve">
    <value>Macro parameter reference must be a letter or digit</value>
  </data>
  <data name="MacroParamNoDefault" xml:space="preserve">
    <value>Macro '{0}' expects a value for parameter {1}; no default value defined</value>
  </data>
  <data name="MacroParamNotSpecified" xml:space="preserve">
    <value>Macro parameter not specified</value>
  </data>
  <data name="MacroRedefinition" xml:space="preserve">
    <value>Redefinition of macro '{0}'</value>
  </data>
  <data name="MissingClosure" xml:space="preserve">
    <value>Missing closure for block</value>
  </data>
  <data name="MissingClosureMacro" xml:space="preserve">
    <value>Missing closure for {0}</value>
  </data>
  <data name="None" xml:space="preserve">
    <value>General syntax error</value>
  </data>
  <data name="ParameterNameInvalid" xml:space="preserve">
    <value>Parameter name '{0}' invalid</value>
  </data>
  <data name="PCOverflow" xml:space="preserve">
    <value>Program Counter overflow '{0}'</value>
  </data>
  <data name="PStringSizeTooLarge" xml:space="preserve">
    <value>Pstring size too large</value>
  </data>
  <data name="QuoteStringNotEnclosed" xml:space="preserve">
    <value>Quote string is not enclosed</value>
  </data>
  <data name="RecursiveMacro" xml:space="preserve">
    <value>Macro or segment '{0}' is being called recursively</value>
  </data>
  <data name="SegmentNotDefined" xml:space="preserve">
    <value>Segment '{0}' is not defined</value>
  </data>
  <data name="TooFewArguments" xml:space="preserve">
    <value>Too few arguments for directive '{0}'</value>
  </data>
  <data name="TooManyArguments" xml:space="preserve">
    <value>Too many arguments for directive '{0}'</value>
  </data>
  <data name="TooManyCharacters" xml:space="preserve">
    <value>Too many characters in character literal</value>
  </data>
  <data name="TypeDefinitionError" xml:space="preserve">
    <value>Cannot redefine type to '{0}' because it is already a type</value>
  </data>
  <data name="TypeNameReserved" xml:space="preserve">
    <value>Type name '{0}' is a reserved symbol name</value>
  </data>
  <data name="UnknownInstruction" xml:space="preserve">
    <value>Unknown instruction or incorrect parameters for instruction '{0}'</value>
  </data>
</root>